#!/usr/bin/python3
import json
import os
from PIL import Image, ImageDraw, ImageFont

outputname = "meme.png"
template_path = "img"

font_path = "font/Envy.ttf"
font_size = 50
font_width = 27
font_height = 51
font = ImageFont.truetype(font_path,font_size)

template = "brain4"

avlbTmplt = []
for root, dirs, files in os.walk(template_path,topdown=True):
    for name in files:
        if ".json" in name:
            avlbTmplt.append(name.replace('.json',''))
avlbTmplt = sorted(avlbTmplt)

quit()

imgpath = "img/" + template + ".png"
fn = "img/" + template + ".json"

data = open(fn).read()
data = json.loads(data)

ta = data['text_areas']

message = ["IE or Safari","Google Chrome","Firefox", "Waterfox + Vimfx extension that is no longer available", "qutebrowser", "surf", "w3m", "wget + vim"]

class TextArea:
    def __init__(self, textAreaData, message):
        self.x1 = textAreaData[0] + 10
        self.y1 = textAreaData[1] + 10
        self.x2 = textAreaData[2] - 10
        self.y2 = textAreaData[3] - 10
        self.message = message
        self.textList = []
        self.line_amount = 0

    def maxCharPerLine(self):
        return int((self.x2 - self.x1) / font_width)

    def getText(self):
        limit = self.maxCharPerLine()
        tsplit = self.message.split()
        l = 0
        t = [""]
        text = ""
        for i, w in enumerate(tsplit):
            if ((len(t[l]) + len(w)) < limit + 1):
                t[l] = t[l] + w + " "
            else:
                t[l] = t[l][:-1] + "\n"
                l = l + 1
                t.append(w + " ")

        for i in t:
            text = text + i
        self.line_amount = l
        self.textList = t
        return text

    def setx(self):
        wlen = len(max(self.textList, key=len))
        maxlen = self.maxCharPerLine()
        x = self.x1
        x += ((maxlen - wlen)/2) * font_width
        return x

    def sety(self):
        taYsize = self.y2 - self.y1
        lAvlbl = taYsize / font_height
        lNdd = self.line_amount
        y = ((lAvlbl / 2) - (0.5 + lNdd/2)) * font_height
        y += self.y1
        return y


image = Image.open(imgpath)
draw = ImageDraw.Draw(image)

def drawText(m, textAreaData):
    textArea = TextArea(textAreaData, m)
    text = textArea.getText()
    draw.text(
        xy=(textArea.setx(),textArea.sety()),
        text=text,fill=(0,0,0),font=font)

for i, a in enumerate(ta):
    m = message[i]
    drawText(m,a)

image.save(outputname)
